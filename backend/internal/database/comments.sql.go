// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: comments.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createComment = `-- name: CreateComment :one
INSERT INTO comments (post_id, created_at, updated_at, username, content, reply_to, user_last_seen)
VALUES ($1, $2, $3, $4, $5, $6, $7)
RETURNING id, post_id, created_at, updated_at, username, content, reply_to, user_last_seen
`

type CreateCommentParams struct {
	PostID       uuid.NullUUID
	CreatedAt    time.Time
	UpdatedAt    time.Time
	Username     string
	Content      string
	ReplyTo      sql.NullInt32
	UserLastSeen time.Time
}

func (q *Queries) CreateComment(ctx context.Context, arg CreateCommentParams) (Comment, error) {
	row := q.db.QueryRowContext(ctx, createComment,
		arg.PostID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Username,
		arg.Content,
		arg.ReplyTo,
		arg.UserLastSeen,
	)
	var i Comment
	err := row.Scan(
		&i.ID,
		&i.PostID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Username,
		&i.Content,
		&i.ReplyTo,
		&i.UserLastSeen,
	)
	return i, err
}

const getCommentByID = `-- name: GetCommentByID :one
SELECT id, post_id, created_at, updated_at, username, content, reply_to, user_last_seen FROM comments where comments.id = $1
`

func (q *Queries) GetCommentByID(ctx context.Context, id int32) (Comment, error) {
	row := q.db.QueryRowContext(ctx, getCommentByID, id)
	var i Comment
	err := row.Scan(
		&i.ID,
		&i.PostID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Username,
		&i.Content,
		&i.ReplyTo,
		&i.UserLastSeen,
	)
	return i, err
}

const getCommentsByPostID = `-- name: GetCommentsByPostID :many
SELECT id, post_id, created_at, updated_at, username, content, reply_to, user_last_seen FROM comments 
WHERE comments.post_id = $1
ORDER BY comments.created_at ASC
`

func (q *Queries) GetCommentsByPostID(ctx context.Context, postID uuid.NullUUID) ([]Comment, error) {
	rows, err := q.db.QueryContext(ctx, getCommentsByPostID, postID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Comment
	for rows.Next() {
		var i Comment
		if err := rows.Scan(
			&i.ID,
			&i.PostID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Username,
			&i.Content,
			&i.ReplyTo,
			&i.UserLastSeen,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getReadCommentsByPostID = `-- name: GetReadCommentsByPostID :many
SELECT id, post_id, created_at, updated_at, username, content, reply_to, user_last_seen FROM comments 
WHERE comments.post_id = $1
AND comments.created_at <= comments.user_last_seen
ORDER BY comments.created_at ASC
`

func (q *Queries) GetReadCommentsByPostID(ctx context.Context, postID uuid.NullUUID) ([]Comment, error) {
	rows, err := q.db.QueryContext(ctx, getReadCommentsByPostID, postID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Comment
	for rows.Next() {
		var i Comment
		if err := rows.Scan(
			&i.ID,
			&i.PostID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Username,
			&i.Content,
			&i.ReplyTo,
			&i.UserLastSeen,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUnreadCommentsByPostID = `-- name: GetUnreadCommentsByPostID :many
SELECT id, post_id, created_at, updated_at, username, content, reply_to, user_last_seen FROM comments 
WHERE comments.post_id = $1
AND comments.created_at > comments.user_last_seen
ORDER BY comments.created_at ASC
`

func (q *Queries) GetUnreadCommentsByPostID(ctx context.Context, postID uuid.NullUUID) ([]Comment, error) {
	rows, err := q.db.QueryContext(ctx, getUnreadCommentsByPostID, postID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Comment
	for rows.Next() {
		var i Comment
		if err := rows.Scan(
			&i.ID,
			&i.PostID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Username,
			&i.Content,
			&i.ReplyTo,
			&i.UserLastSeen,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUnreadCommentsByPostID1 = `-- name: GetUnreadCommentsByPostID1 :many
SELECT comments.id, comments.post_id, comments.created_at, comments.updated_at, comments.username, comments.content, comments.reply_to, comments.user_last_seen 
FROM comments 
JOIN posts 
ON comments.post_id = posts.id 
JOIN users 
ON posts.username = users.name 
WHERE comments.post_id = $1 
AND comments.updated_at > users.last_seen
ORDER BY comments.created_at ASC
`

func (q *Queries) GetUnreadCommentsByPostID1(ctx context.Context, postID uuid.NullUUID) ([]Comment, error) {
	rows, err := q.db.QueryContext(ctx, getUnreadCommentsByPostID1, postID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Comment
	for rows.Next() {
		var i Comment
		if err := rows.Scan(
			&i.ID,
			&i.PostID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Username,
			&i.Content,
			&i.ReplyTo,
			&i.UserLastSeen,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCommentsUserLastSeen = `-- name: UpdateCommentsUserLastSeen :exec
UPDATE comments
SET user_last_seen = $1
WHERE comments.post_id = $2
`

type UpdateCommentsUserLastSeenParams struct {
	UserLastSeen time.Time
	PostID       uuid.NullUUID
}

func (q *Queries) UpdateCommentsUserLastSeen(ctx context.Context, arg UpdateCommentsUserLastSeenParams) error {
	_, err := q.db.ExecContext(ctx, updateCommentsUserLastSeen, arg.UserLastSeen, arg.PostID)
	return err
}
