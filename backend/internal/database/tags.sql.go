// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: tags.sql

package database

import (
	"context"
	"database/sql"
)

const createTag = `-- name: CreateTag :one
WITH ins AS (
    INSERT INTO tags (name)
    VALUES ($1)
    ON CONFLICT (name) DO NOTHING
    RETURNING id, name
)
SELECT id, name FROM ins
UNION ALL 
SELECT id, name FROM tags WHERE name = $1
`

type CreateTagRow struct {
	ID   int32
	Name string
}

func (q *Queries) CreateTag(ctx context.Context, name string) (CreateTagRow, error) {
	row := q.db.QueryRowContext(ctx, createTag, name)
	var i CreateTagRow
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const getPopularPageTags = `-- name: GetPopularPageTags :many
SELECT tags.id, tags.name, COUNT(posts.id) as tagcount
FROM tags
JOIN post_tags
ON tags.id = post_tags.tag_id
JOIN posts
ON posts.id = post_tags.post_id
WHERE posts.pagename = $1
GROUP BY tags.id
ORDER BY tagcount DESC
limit 6
`

type GetPopularPageTagsRow struct {
	ID       int32
	Name     string
	Tagcount int64
}

func (q *Queries) GetPopularPageTags(ctx context.Context, pagename sql.NullString) ([]GetPopularPageTagsRow, error) {
	rows, err := q.db.QueryContext(ctx, getPopularPageTags, pagename)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetPopularPageTagsRow
	for rows.Next() {
		var i GetPopularPageTagsRow
		if err := rows.Scan(&i.ID, &i.Name, &i.Tagcount); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTagsById = `-- name: GetTagsById :many
SELECT id, name FROM tags where tags.id = $1
`

func (q *Queries) GetTagsById(ctx context.Context, id int32) ([]Tag, error) {
	rows, err := q.db.QueryContext(ctx, getTagsById, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Tag
	for rows.Next() {
		var i Tag
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTagsByName = `-- name: GetTagsByName :many
SELECT id, name FROM tags where tags.name = $1
`

func (q *Queries) GetTagsByName(ctx context.Context, name string) ([]Tag, error) {
	rows, err := q.db.QueryContext(ctx, getTagsByName, name)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Tag
	for rows.Next() {
		var i Tag
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTagsByPage = `-- name: GetTagsByPage :many
SELECT DISTINCT tags.name
FROM posts JOIN post_tags 
ON posts.id = post_tags.post_id
JOIN tags 
ON post_tags.tag_id = tags.id
WHERE pagename = $1
`

func (q *Queries) GetTagsByPage(ctx context.Context, pagename sql.NullString) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, getTagsByPage, pagename)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var name string
		if err := rows.Scan(&name); err != nil {
			return nil, err
		}
		items = append(items, name)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTagsLikeNameAndByPage = `-- name: GetTagsLikeNameAndByPage :many
SELECT DISTINCT tags.name 
FROM posts 
JOIN post_tags 
ON posts.id = post_tags.post_id
JOIN tags 
ON post_tags.tag_id = tags.id
WHERE pagename = $1
AND tags.name LIKE $2 || '%'
LIMIT 10
`

type GetTagsLikeNameAndByPageParams struct {
	Pagename sql.NullString
	Column2  sql.NullString
}

func (q *Queries) GetTagsLikeNameAndByPage(ctx context.Context, arg GetTagsLikeNameAndByPageParams) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, getTagsLikeNameAndByPage, arg.Pagename, arg.Column2)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var name string
		if err := rows.Scan(&name); err != nil {
			return nil, err
		}
		items = append(items, name)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
