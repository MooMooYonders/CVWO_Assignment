// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: tags.sql

package database

import (
	"context"
)

const createTag = `-- name: CreateTag :one
WITH ins AS (
    INSERT INTO tags (name)
    VALUES ($1)
    ON CONFLICT (name) DO NOTHING
    RETURNING id, name
)
SELECT id, name FROM ins
UNION ALL 
SELECT id, name FROM tags WHERE name = $1
`

type CreateTagRow struct {
	ID   int32
	Name string
}

func (q *Queries) CreateTag(ctx context.Context, name string) (CreateTagRow, error) {
	row := q.db.QueryRowContext(ctx, createTag, name)
	var i CreateTagRow
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const getTagsById = `-- name: GetTagsById :many
SELECT id, name FROM tags where tags.id = $1
`

func (q *Queries) GetTagsById(ctx context.Context, id int32) ([]Tag, error) {
	rows, err := q.db.QueryContext(ctx, getTagsById, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Tag
	for rows.Next() {
		var i Tag
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTagsByName = `-- name: GetTagsByName :many
SELECT id, name FROM tags where tags.name = $1
`

func (q *Queries) GetTagsByName(ctx context.Context, name string) ([]Tag, error) {
	rows, err := q.db.QueryContext(ctx, getTagsByName, name)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Tag
	for rows.Next() {
		var i Tag
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
